# -*- coding: utf-8 -*-
"""lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/107feKX9DcWSaGYwPROVd6ImOOpzft3_G
"""

import pandas as pd
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense


excel_path = "/content/duygularstopwordlowercasegereksizkarekter.xlsx"
veri_seti = pd.read_excel(excel_path)


X = veri_seti['comments'].values
y = pd.get_dummies(veri_seti['label']).values

# Tokenization
max_kelime_sayisi = 10000  # SÃ¶zlÃ¼kteki maksimum kelime sayÄ±sÄ±
tokenizer = Tokenizer(num_words=max_kelime_sayisi, oov_token="<OOV>")
tokenizer.fit_on_texts(X)

# EÄŸitim verilerini tokenlara Ã§evirme
X_sequences = tokenizer.texts_to_sequences(X)


max_sequence_length = 100  # CÃ¼mlelerin maksimum uzunluÄŸu
X_padded = pad_sequences(X_sequences, maxlen=max_sequence_length, padding='post', truncating='post')

# Duygu etiketleri ve emojileri
duygu_sozlugu = {0: ("ÃœzÃ¼ntÃ¼", "ğŸ˜¢"),
                 1: ("NeÅŸe", "ğŸ˜„"),
                 2: ("Alay", "ğŸ˜œ"),  
                 3: ("Ofke", "ğŸ˜ ")}

# LSTM modeli oluÅŸturma
model = Sequential()
model.add(Embedding(input_dim=max_kelime_sayisi, output_dim=128, input_length=max_sequence_length))
model.add(LSTM(units=256, dropout=0.2, recurrent_dropout=0.2))  # HÃ¼cre sayÄ±sÄ±nÄ± artÄ±rma
model.add(Dense(units=4, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Modeli eÄŸitme

# Ã–rnek olarak epochs'u 5'e Ã§Ä±karalÄ±m
epochs = 5
batch_size = 32  # Batch size'i tanÄ±mladÄ±m
model.fit(X_padded, y, epochs=epochs, batch_size=batch_size)

# KullanÄ±cÄ±dan alÄ±nan tek bir cÃ¼mleyi tahmin etme
yeni_metin = input("SÄ±nÄ±flandÄ±rmak istediÄŸiniz metni girin: ")

# GiriÅŸ metnini tokenlara Ã§evirme
yeni_metin_sequence = tokenizer.texts_to_sequences([yeni_metin])
yeni_metin_padded = pad_sequences(yeni_metin_sequence, maxlen=max_sequence_length, padding='post', truncating='post')

# Tahmin yapma
tahmin = model.predict(yeni_metin_padded)

tahmin_etiketi = np.argmax(tahmin)

# Tahmin edilen duygu etiketini sÃ¶zlÃ¼kten al
duygu_isim, duygu_emoji = duygu_sozlugu[tahmin_etiketi]

print(f"Girilen metin: {yeni_metin}")
print(f"Tahmin edilen duygu: {duygu_isim} {duygu_emoji}")

